<html>
<head>
<title>Google Maps Interface</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" charset="UTF-8"/>
<style type="text/css">
html, body, #map_canvas 
{
    margin: 0;
    padding: 0;
    height: 100%;
}
</style>

<!--
XXX:
The version of the javascript api may point to the strange segfaulting we get
when zooming rapidly.  We should try setting the version to 3.5 (rumored to
work here: http://code.google.com/p/gmaps-api-issues/issues/detail?id=3882) or
try the experimental version, 3.exp.  I am setting to 3.exp for the time being to
see if it helps.  Testing needed. kss 20130304
-->
<!--<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=geometry&sensor=false"></script>-->
<div class="content">
<!--<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry&sensor=false"></script>-->
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?v=3.5&libraries=geometry&sensor=false"></script>
<script type="text/javascript">
    var i = setInterval(function () {
        clearInterval(i);

        // The desired code is only this:
        document.getElementById("loading").style.display = "none";
        document.getElementById("content").style.display = "block";

    }, 2000);

    var map;
    var geocoder;
    var myLatLng = new google.maps.LatLng(46.872146, -113.9939982);
    var overlays = [];
    var demBounds = [];
    var lat;
    var lng;
    var latlngStart, latlngEnd;
    var us_srtm_kml;
    var srtmPoly;
    var rect;
    var dragging = false;
    var drawingManager;

    /**
    * @brief Add a Zoom Extents button to the Google Map
    *
    */
    function ZoomExtents(controlDiv, map) {

        // Set CSS styles for the DIV containing the control
        // Setting padding to 5 px will offset the control
        // from the edge of the map.
        controlDiv.style.padding = '5px';

        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = 'white';
        controlUI.style.borderStyle = 'solid';
        controlUI.style.borderWidth = '2px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.textAlign = 'center';
        controlUI.title = 'Zoom to Extents';
        controlDiv.appendChild(controlUI);
        // Set CSS for the control interior.
        var controlText = document.createElement('div');
        controlText.style.fontFamily = 'Arial,sans-serif';
        controlText.style.fontSize = '12px';
        controlText.style.paddingLeft = '4px';
        controlText.style.paddingRight = '4px';
        controlText.innerHTML = '<strong>Zoom to Extents</strong>';
        controlUI.appendChild(controlText);

        // Setup the zoom to extents listener
        google.maps.event.addDomListener(controlUI, 'click', function () {
            GMInterface.zoomExtents();
        });
    }

    /**
    * @brief Adds a Clear Map button to the Google Map
    *
    */
    function ClearMap(controlDiv, map) {

        // Set CSS styles for the DIV containing the control
        // Setting padding to 5 px will offset the control
        // from the edge of the map.
        controlDiv.style.padding = '5px';

        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = 'white';
        controlUI.style.borderStyle = 'solid';
        controlUI.style.borderWidth = '2px';
        controlUI.style.cursor = 'pointer';
        controlUI.style.textAlign = 'center';
        controlUI.title = 'Clear Map';
        controlDiv.appendChild(controlUI);
        // Set CSS for the control interior.
        var controlText = document.createElement('div');
        controlText.style.fontFamily = 'Arial,sans-serif';
        controlText.style.fontSize = '12px';
        controlText.style.paddingLeft = '4px';
        controlText.style.paddingRight = '4px';
        controlText.innerHTML = '<strong>Clear Map</strong>';
        controlUI.appendChild(controlText);
        
        //Set up the clear map listener
        google.maps.event.addDomListener(controlUI, 'click', function () {
            clearOverlays();
            clearListeners();
            GMInterface.areaSelected(false);
        });
        
    }

    /**
    * @brief Initializes the Google Map
    *
    */
    function initialize() {
        var myOptions = {
            zoom: 10,
            center: new google.maps.LatLng(43.911944, -113.613611),
            mapTypeId: google.maps.MapTypeId.TERRAIN,
            mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR },
            scaleControl: true, 
            draggable: true,
            scrollwheel: true,
            zoomControl: true,
            streetViewControl: false,
            zoomControlOptions: { style: google.maps.ZoomControlStyle.SMALL }
        };

        map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);
        geocoder = new google.maps.Geocoder();
        us_srtm_kml = new google.maps.KmlLayer('https://github.com/firelab/windninja/raw/master/data/us_srtm_region.kml', {
            preserveViewport: true,
            clickable: false,
            suppressInfoWindows: true
        });

        var zoomExtentsDiv = document.createElement('div');
        var zoomExtentsControl = new ZoomExtents(zoomExtentsDiv, map);
        zoomExtentsDiv.index = 1;
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(zoomExtentsDiv);

        var clearMapDiv = document.createElement('div');
        var clearMapControl = new ClearMap(clearMapDiv, map);
        clearMapDiv.index = 1;
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearMapDiv);

        rect = new google.maps.Rectangle({
            map: map
        });

        GMInterface.zoomExtents();
    }

    /* Old image, may consider switching back to this, but will need to imbed .png into map.htm
    var image = new google.maps.MarkerImage('placemark_circle.png',
    new google.maps.Size(32, 32),
    new google.maps.Point(0,0),
    new google.maps.Point(16,16)
    );
    */
    var image = new google.maps.MarkerImage("http://maps.google.com/mapfiles/kml/shapes/placemark_circle.png",
        null,
        new google.maps.Point(0,0),
        new google.maps.Point(16,16)
    );

    /**
    * @brief Clears all overlays stored in the array
    *
    */
    function clearOverlays() {
        if (overlays) {
            for (i in overlays) {

                overlays[i].setMap(null);
            }
            overlays.length = 0;
        }
    }

    /**
    * @brief Clears the DEM Bounds array
    *
    */
    function clearDEMBounds() {
        if (demBounds) {
            for (i in demBounds) {
                demBounds[i].setMap(null);
            }
            demBounds.length = 0;
        }
        us_srtm_kml.setMap(null);
    }

    /**
    * @brief Zooms the viewport to fit the current bounds
    *
    */
    function zoomFitBounds(south,west,north,east) {
        map.fitBounds(new google.maps.LatLngBounds(new google.maps.LatLng(south, west), new google.maps.LatLng(north, east)));
    }

    /**
    * @brief Geocoding features for Google Maps
    *
    */
    function geocode(address) {
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                map.setCenter(results[0].geometry.location);
                map.fitBounds(results[0].geometry.viewport);
            }
            else {
                GMInterface.geocodeError();
            }
        });
    }

    /**
    * @brief Let the user select a point on the map
    *
    */
    function userPoint(south, west, north, east) {
        clearOverlays();
        map.setOptions({ draggableCursor: 'crosshair' });
        google.maps.event.addListener(map, 'click', function (event) {
            google.maps.event.clearListeners(map, 'click');
            GMInterface.latlngChangedGUI(event.latLng.lat(), event.latLng.lng());
            GMInterface.plotUserPoint();
            GMInterface.areaSelected(true);
            map.setOptions({ draggableCursor: null });
        });
    }

    /**
    * @brief Plots a centroid point and the buffer around it
    *
    */
    function plotCentroidBuffer(south,west,north,east,latitude,longitude) {
        clearOverlays();
        lat = latitude;
        lng = longitude;

        var buffer = new google.maps.Rectangle({
            bounds: new google.maps.LatLngBounds(new google.maps.LatLng(south,west),new google.maps.LatLng(north,east)),
            clickable: false,
            editable: true,
            strokeColor: '#FF0000',
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.1,
            map: map
        });
        overlays.push(buffer);

        var northBound = buffer.getBounds().getNorthEast().lat();
        var southBound = buffer.getBounds().getSouthWest().lat();
        var eastBound = buffer.getBounds().getNorthEast().lng();
        var westBound = buffer.getBounds().getSouthWest().lng();
        GMInterface.boundsChanged(northBound, southBound, eastBound, westBound);

        var rectangleMove = new google.maps.Marker({
            map: map,
            icon: image,
            position: new google.maps.LatLng(latitude, longitude),
            draggable: true,
            title: latitude.toString() + "," + longitude.toString(),
            raiseOnDrag: false
        });
        overlays.push(rectangleMove);

        google.maps.event.addListener(buffer, 'bounds_changed', function (event) {
            var northBound = buffer.getBounds().getNorthEast().lat();
            var southBound = buffer.getBounds().getSouthWest().lat();
            var eastBound = buffer.getBounds().getNorthEast().lng();
            var westBound = buffer.getBounds().getSouthWest().lng();
            rectangleMove.setPosition(buffer.getBounds().getCenter());
            GMInterface.boundsChangedGUI(northBound, southBound, eastBound, westBound);
            GMInterface.bufferChanged();
            GMInterface.latlngChangedGUI(buffer.getBounds().getCenter().lat(), buffer.getBounds().getCenter().lng());
        });

        google.maps.event.addListener(rectangleMove, 'drag', function (event) {
            buffer.setCenter(event.latLng);
            GMInterface.latlngChangedGUI(event.latLng.lat(), event.latLng.lng());
        });
 
        GMInterface.areaSelected(true);
    }

    /**
    * @brief Lets the user define a set of bounds
    *
    */
    function userBounds() {
        clearOverlays();
        rect = undefined;
        map.setOptions({ draggableCursor: 'crosshair' });

        google.maps.event.addListener(map, 'mousedown', function (event) {
            map.draggable = false;
            dragging = true;
            latlngStart = event.latLng;
        });

        google.maps.event.addListener(map, 'mousemove', function (event) {
            latlngEnd = event.latLng;
            showRect();
        });

        google.maps.event.addListener(map, 'mouseup', function (event) {
            map.draggable = true;
            dragging = false;
            map.setOptions({ draggableCursor: null });
            clearListeners();
            
            var northLat = rect.getBounds().getNorthEast().lat();
            var southLat = rect.getBounds().getSouthWest().lat();
            var eastLng = rect.getBounds().getNorthEast().lng();
            var westLng = rect.getBounds().getSouthWest().lng();
            if (northLat < southLat) {
                var temp = northLat;
                northLat = southLat;
                southLat = temp;
            }

            GMInterface.boundsChangedGUI(northLat, southLat, eastLng, westLng);
            GMInterface.latlngChangedGUI(rect.getBounds().getCenter().lat(), rect.getBounds().getCenter().lng());
            GMInterface.bufferChanged();
            GMInterface.areaSelected(true);
            rect.setEditable(true);

            google.maps.event.addListener(rect, 'bounds_changed', function (event) {
                var northBound = rect.getBounds().getNorthEast().lat();
                var southBound = rect.getBounds().getSouthWest().lat();
                var eastBound = rect.getBounds().getNorthEast().lng();
                var westBound = rect.getBounds().getSouthWest().lng();
                GMInterface.boundsChangedGUI(northBound, southBound, eastBound, westBound);
                GMInterface.latlngChangedGUI(rect.getBounds().getCenter().lat(), rect.getBounds().getCenter().lng());
                GMInterface.bufferChanged();
                rectangleMove.setPosition(rect.getBounds().getCenter());
            });
            overlays.push(rect);

            var rectangleMove = new google.maps.Marker({
                map: map,
                icon: image,
                position: rect.getBounds().getCenter(),
                draggable: true,
                title: 'Click and Drag',
                raiseOnDrag: false
            });
            overlays.push(rectangleMove);
            google.maps.event.addListener(rectangleMove, 'drag', function (event) {
                rect.setCenter(event.latLng);
                GMInterface.latlngChangedGUI(event.latLng.lat(), event.latLng.lng());
            });
 
        });
    }

    /**
    * @brief Plots the user defined bounds
    *
    */
    function plotBox(southBound, westBound, northBound, eastBound) {
        clearOverlays();

        var buffer = new google.maps.Rectangle({
            bounds: new google.maps.LatLngBounds(new google.maps.LatLng(southBound, westBound), new google.maps.LatLng(northBound, eastBound)),
            clickable: false,
            editable: true,
            strokeColor: '#FF0000',
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.1,
            map: map
        });
        overlays.push(buffer);

        GMInterface.latlngChanged(buffer.getBounds().getCenter().lat(), buffer.getBounds().getCenter().lng());
        GMInterface.bufferChanged();

        var centerPoint = new google.maps.Marker({
            map: map,
            icon: image,
            position: buffer.getBounds().getCenter(),
            draggable: true,
            title: 'Click and Drag',
            raiseOnDrag: false
            });

        overlays.push(centerPoint);

        google.maps.event.addListener(buffer, 'bounds_changed', function (event) {
            var northBound = buffer.getBounds().getNorthEast().lat();
            var southBound = buffer.getBounds().getSouthWest().lat();
            var eastBound = buffer.getBounds().getNorthEast().lng();
            var westBound = buffer.getBounds().getSouthWest().lng();
            GMInterface.boundsChangedGUI(northBound, southBound, eastBound, westBound);
            GMInterface.bufferChanged();
            GMInterface.latlngChanged(buffer.getBounds().getCenter().lat(), buffer.getBounds().getCenter().lng());
            centerPoint.setPosition(buffer.getBounds().getCenter());
        });

        google.maps.event.addListener(centerPoint, 'drag', function (event) {
            buffer.setCenter(event.latLng);
            GMInterface.latlngChangedGUI(event.latLng.lat(), event.latLng.lng());
        });
        
        GMInterface.areaSelected(true);
    } 

    /**
    * @brief Clears all mouse click listeners
    *
    */
    function clearListeners() {
        google.maps.event.clearListeners(map, 'mousedown');
        google.maps.event.clearListeners(map, 'mouseup');
        google.maps.event.clearListeners(map, 'click');
        map.setOptions({ draggableCursor: null });
    }

    /**
    * @brief Determines the center of the selection box
    *
    */
    google.maps.Rectangle.prototype.setCenter = function (latLng) {
        var northBound = this.getBounds().getNorthEast().lat();
        var southBound = this.getBounds().getSouthWest().lat();
        var eastBound = this.getBounds().getNorthEast().lng();
        var westBound = this.getBounds().getSouthWest().lng();
        if (northBound < southBound) {
            var temp = northBound;
            northBound = southBound;
            southBound = temp;
        }
        var height, width;
        if ((eastBound - westBound) < ((180 - eastBound) + westBound)) {
            width = (eastBound - westBound);
        }
        else width = ((180 - eastBound) + westBound);
        height = northBound - southBound;

        lat = latLng.lat();
        lng = latLng.lng();

        var bounds = new google.maps.LatLngBounds(
          new google.maps.LatLng(lat - height / 2.0, lng - width / 2.0),
          new google.maps.LatLng(lat + height / 2.0, lng + width / 2.0)
        );
        this.setOptions({ bounds: bounds });
    }

    /**
    * @brief Displays the box
    *
    */
    function showRect() {
        var rectangleOptions = {
            strokeWeight: 1,
            strokeOpacity: 1,
            fillOpacity: 0.2,
            editable: false,
            clickable: false,
            strokeColor: '#FF0000',
            fillColor: '#FF0000'
        };

        if (dragging) {
            if (rect === undefined) {
                rect = new google.maps.Rectangle({
                    map: map
                });
            }
            if (latlngStart.lng() < latlngEnd.lng()) {
                var latlngBounds = new google.maps.LatLngBounds(latlngStart, latlngEnd);
            }
            else {
                var latlngBounds = new google.maps.LatLngBounds(latlngEnd, latlngStart);
            }

            rect.setOptions(rectangleOptions);
            rect.setBounds(latlngBounds);
        }
    }
    
    google.maps.event.addDomListener(window, 'load', initialize);
    </script>
</div>
</head>
<body>
<div id="loading" style="text-align: center; width:800px; margin:0 auto;">
    Loading Google Maps, Please Wait...
</div>
<div id="map_canvas"></div>
</body>
</html>
